{"ast":null,"code":"var _jsxFileName = \"E:\\\\kurs\\\\SpecSavers\\\\frontend\\\\src\\\\components\\\\CartPage.js\",\n  _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Cookies from 'universal-cookie';\nimport DevicesMenu from './DevicesMenu';\nimport ParamBlock from './ParamBlock';\nimport ParamsNamesBlock from './ParamsNamesBlock';\n\n// Массив с параметрами, которые не нужно учитывать при обработке данных об устройстве\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst notComparable = ['id', 'brand', 'model', 'link', 'type', 'cpu', 'resolution_height', 'images'];\nconst DeviceBlock = ({\n  device,\n  removeFromCard\n}) => {\n  // Блок с данными об одном устройстве\n  let params = [];\n  Object.entries(device).forEach(data => {\n    if (!notComparable.includes(data[0])) {\n      params.push([data[0], ...data[1]]);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"catalog-device\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"catalog-device-brand\",\n      children: device.brand\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n      to: '/catalog/' + device.id,\n      className: \"catalog-device-model\",\n      children: device.model\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), params.map(param => /*#__PURE__*/_jsxDEV(ParamBlock, {\n      param: param\n    }, param[0], false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 36\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: e => removeFromCard(e),\n      className: \"catalog-device-button added\",\n      id: device.id,\n      children: \"\\u0423\\u0431\\u0440\\u0430\\u0442\\u044C \\u0438\\u0437 \\u043A\\u043E\\u0440\\u0437\\u0438\\u043D\\u044B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_c = DeviceBlock;\nconst CartPage = ({\n  devices,\n  type\n}) => {\n  _s();\n  // Блок страницы корзины\n  const cookie = new Cookies();\n  let added = `${cookie.get('added')}`.split(',');\n  let [addedDevices, setAddedDevices] = useState([]);\n  addedDevices = devices.filter(i => added.includes(`${i.id}`));\n\n  // Механизм сравнения устройств\n  if (addedDevices.length > 0) {\n    addedDevices = addedDevices.map(device => {\n      return {\n        ...device\n      };\n    });\n    for (let param of Object.keys(addedDevices[0])) {\n      if (param == 'video_card') {\n        addedDevices.sort((a, b) => {\n          return a.video_card.rank - b.video_card.rank;\n        });\n      } else if (param == 'resolution_width') {\n        addedDevices.sort((a, b) => {\n          return b.resolution_width * b.resolution_height - a.resolution_width * a.resolution_height;\n        });\n      } else if (['weight', 'price'].includes(param)) {\n        addedDevices.sort((a, b) => {\n          return a[param] - b[param];\n        });\n      } else if (!notComparable.includes(param)) {\n        addedDevices.sort((a, b) => {\n          return b[param] - a[param];\n        });\n      }\n      if (!notComparable.includes(param)) {\n        let best = addedDevices[0][param];\n        let worst = addedDevices[addedDevices.length - 1][param];\n        if (param == 'video_card') {\n          best = addedDevices[0]['video_card']['model'];\n          worst = addedDevices[addedDevices.length - 1]['video_card']['model'];\n        } else if (param == 'resolution_width') {\n          best = addedDevices[0]['resolution_width'] * addedDevices[0]['resolution_height'];\n          worst = addedDevices[addedDevices.length - 1]['resolution_width'] * addedDevices[addedDevices.length - 1]['resolution_height'];\n        }\n        if (best == worst) {\n          addedDevices.forEach(device => {\n            if (param == 'video_card') {\n              device['video_card'] = [device['video_card']['model'], 'neutral'];\n            } else if (param == 'resolution_width') {\n              device['resolution_width'] = [`${device['resolution_width']}x${device['resolution_height']}`, 'neutral'];\n            } else {\n              device[param] = [device[param], 'neutral'];\n            }\n          });\n        } else {\n          addedDevices.forEach(device => {\n            let color = 'neutral';\n            if (param == 'video_card') {\n              if (device['video_card']['model'] == best) {\n                color = 'best';\n              } else if (device['video_card']['model'] == worst) {\n                color = 'worst';\n              }\n              device['video_card'] = [device['video_card']['model'], color];\n            } else if (param == 'resolution_width') {\n              let resolution = device['resolution_width'] * device['resolution_height'];\n              if (resolution == best) {\n                color = 'best';\n              } else if (resolution == worst) {\n                color = 'worst';\n              }\n              device['resolution_width'] = [`${device['resolution_width']}x${device['resolution_height']}`, color];\n            } else {\n              if (device[param] == best) {\n                color = 'best';\n              } else if (device[param] == worst) {\n                color = 'worst';\n              }\n              device[param] = [device[param], color];\n            }\n          });\n        }\n      }\n    }\n  }\n\n  // Функция удаления устройства из корзины\n  const removeFromCard = useCallback(e => {\n    added.splice(added.indexOf(e.target.id), 1);\n    cookie.set('added', added.join(','));\n    setAddedDevices(devices.filter(i => added.includes(`${i.id}`)));\n  }, [cookie, added, devices, setAddedDevices]);\n\n  // Код получения названий параметром для плока с названиями и необходимого количества этих блоков в зависимости от количества устройств\n  let count = addedDevices.length > 0 ? Math.ceil(addedDevices.length / 3) : 0;\n  let keys = [];\n  if (count > 0) {\n    Object.keys(addedDevices[0]).forEach(key => {\n      if (!notComparable.includes(key)) {\n        keys.push(key);\n      }\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cart-block\",\n    children: [/*#__PURE__*/_jsxDEV(DevicesMenu, {\n      type: type,\n      section: \"cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cart-bottom\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cart-names\",\n        children: Array.apply(null, {\n          length: count\n        }).map(i => /*#__PURE__*/_jsxDEV(ParamsNamesBlock, {\n          keys: keys,\n          extended: true\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 70\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cart-devices\",\n        children: addedDevices.map(device => /*#__PURE__*/_jsxDEV(DeviceBlock, {\n          device: device,\n          removeFromCard: removeFromCard\n        }, device.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 51\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n};\n_s(CartPage, \"uI973zblaiQTd5+bru2FmdOsSgA=\");\n_c2 = CartPage;\nexport default CartPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"DeviceBlock\");\n$RefreshReg$(_c2, \"CartPage\");","map":{"version":3,"names":["useState","useCallback","NavLink","Cookies","DevicesMenu","ParamBlock","ParamsNamesBlock","jsxDEV","_jsxDEV","notComparable","DeviceBlock","device","removeFromCard","params","Object","entries","forEach","data","includes","push","className","children","brand","fileName","_jsxFileName","lineNumber","columnNumber","to","id","model","map","param","onClick","e","_c","CartPage","devices","type","_s","cookie","added","get","split","addedDevices","setAddedDevices","filter","i","length","keys","sort","a","b","video_card","rank","resolution_width","resolution_height","best","worst","color","resolution","splice","indexOf","target","set","join","count","Math","ceil","key","section","Array","apply","extended","_c2","$RefreshReg$"],"sources":["E:/kurs/SpecSavers/frontend/src/components/CartPage.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Cookies from 'universal-cookie';\r\nimport DevicesMenu from './DevicesMenu';\r\nimport ParamBlock from './ParamBlock'\r\nimport ParamsNamesBlock from './ParamsNamesBlock';\r\n\r\n// Массив с параметрами, которые не нужно учитывать при обработке данных об устройстве\r\nconst notComparable = ['id', 'brand', 'model', 'link', 'type', 'cpu', 'resolution_height', 'images'];\r\n\r\nconst DeviceBlock = ({device, removeFromCard}) => {\r\n    // Блок с данными об одном устройстве\r\n    let params = [];\r\n\r\n    Object.entries(device).forEach((data) => {\r\n        if(!notComparable.includes(data[0])) {\r\n            params.push([data[0], ...data[1]]);\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className='catalog-device'>\r\n            <h2 className='catalog-device-brand'>{device.brand}</h2>\r\n            <NavLink to={'/catalog/' + device.id} className='catalog-device-model'>{device.model}</NavLink>\r\n            {params.map((param) => <ParamBlock param={param} key={param[0]} />)}\r\n            <div onClick={(e) => removeFromCard(e)} className='catalog-device-button added' id={device.id}>Убрать из корзины</div> \r\n        </div>\r\n    )\r\n}\r\n\r\nconst CartPage = ({devices, type}) => {\r\n    // Блок страницы корзины\r\n    const cookie = new Cookies();\r\n\r\n    let added = `${cookie.get('added')}`.split(',');\r\n    let [addedDevices, setAddedDevices] = useState([]);\r\n    addedDevices = devices.filter((i) => added.includes(`${i.id}`));\r\n\r\n    // Механизм сравнения устройств\r\n    if(addedDevices.length > 0) {\r\n        addedDevices = addedDevices.map((device) => {\r\n            return {...device};\r\n        })\r\n        for(let param of Object.keys(addedDevices[0])) {\r\n            if(param == 'video_card') {\r\n                addedDevices.sort((a, b) => {return a.video_card.rank - b.video_card.rank});\r\n            } else if(param == 'resolution_width') {\r\n                addedDevices.sort((a, b) => {return b.resolution_width * b.resolution_height - a.resolution_width * a.resolution_height});\r\n            } else if(['weight', 'price'].includes(param)) {\r\n                addedDevices.sort((a, b) => {return a[param] - b[param]});\r\n            } else if(!notComparable.includes(param)) {\r\n                addedDevices.sort((a, b) => {return b[param] - a[param]});\r\n            }\r\n\r\n            if(!notComparable.includes(param)) {\r\n                let best = addedDevices[0][param];\r\n                let worst = addedDevices[addedDevices.length - 1][param];\r\n                if(param == 'video_card') {\r\n                    best = addedDevices[0]['video_card']['model'];\r\n                    worst = addedDevices[addedDevices.length - 1]['video_card']['model'];\r\n                } else if(param == 'resolution_width') {\r\n                    best = addedDevices[0]['resolution_width'] * addedDevices[0]['resolution_height'];\r\n                    worst = addedDevices[addedDevices.length - 1]['resolution_width'] * addedDevices[addedDevices.length - 1]['resolution_height'];\r\n                }\r\n                if(best == worst) {\r\n                    addedDevices.forEach((device) => {\r\n                        if(param == 'video_card') {\r\n                            device['video_card'] = [device['video_card']['model'], 'neutral']; \r\n                        } else if(param == 'resolution_width') {\r\n                            device['resolution_width'] = [`${device['resolution_width']}x${device['resolution_height']}`, 'neutral'];\r\n                        } else {\r\n                            device[param] = [device[param], 'neutral'];\r\n                        }\r\n                    })\r\n                } else {\r\n                    addedDevices.forEach((device) => {\r\n                        let color = 'neutral';\r\n                        if(param == 'video_card') {\r\n                            if(device['video_card']['model'] == best) {\r\n                                color = 'best';\r\n                            } else if(device['video_card']['model'] == worst) {\r\n                                color = 'worst';\r\n                            }\r\n                            device['video_card'] = [device['video_card']['model'], color];\r\n                        } else if(param == 'resolution_width') {\r\n                            let resolution = device['resolution_width'] * device['resolution_height'];\r\n                            if(resolution == best) {\r\n                                color = 'best';\r\n                            } else if(resolution == worst) {\r\n                                color = 'worst';\r\n                            }\r\n                            device['resolution_width'] = [`${device['resolution_width']}x${device['resolution_height']}`, color];\r\n                        } else {\r\n                            if(device[param] == best) {\r\n                                color = 'best';\r\n                            } else if(device[param] == worst) {\r\n                                color = 'worst';\r\n                            }\r\n                            device[param] = [device[param], color];\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Функция удаления устройства из корзины\r\n    const removeFromCard = useCallback((e) => {\r\n        added.splice(added.indexOf(e.target.id), 1);\r\n        cookie.set('added', added.join(','));\r\n        setAddedDevices(devices.filter((i) => added.includes(`${i.id}`)));\r\n    }, [cookie, added, devices, setAddedDevices])\r\n\r\n    // Код получения названий параметром для плока с названиями и необходимого количества этих блоков в зависимости от количества устройств\r\n    let count = addedDevices.length > 0 ? Math.ceil(addedDevices.length / 3) : 0;\r\n    let keys = [];\r\n    if(count > 0) {\r\n        Object.keys(addedDevices[0]).forEach((key) => {\r\n            if(!notComparable.includes(key)) {\r\n                keys.push(key);\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='cart-block'>\r\n            <DevicesMenu type={type} section='cart'/>\r\n            <div className='cart-bottom'>\r\n                <div className='cart-names'>\r\n                    {Array.apply(null, { length: count }).map((i) => <ParamsNamesBlock keys={keys} extended={true} key={i} />)}\r\n                </div>\r\n                <div className='cart-devices'>\r\n                    {addedDevices.map((device) => <DeviceBlock device={device} removeFromCard={removeFromCard} key={device.id} />)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CartPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}